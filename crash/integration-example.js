/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CrashGraphAnimation –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤ crash-websocket.js
 */

// ========================================
// –í–ê–†–ò–ê–ù–¢ 1: –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Canvas
// ========================================

// –í –Ω–∞—á–∞–ª–µ crash-websocket.js –¥–æ–±–∞–≤—å—Ç–µ:
let crashGraphAnimation = null;

// –í –±–ª–æ–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 99):
function initCrashGraphAnimation() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Canvas
  let canvas = document.getElementById('crashGraph');
  
  // –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
  if (!canvas) {
    const gameContainer = document.querySelector('.game');
    canvas = document.createElement('canvas');
    canvas.id = 'crashGraph';
    canvas.width = 400;
    canvas.height = 256;
    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = '1';
    gameContainer.appendChild(canvas);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  crashGraphAnimation = new CrashGraphAnimation('crashGraph', {
    baseGrowth: 0.0001,        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
    maxPoints: 120,            // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    trailLength: 8,            // –î–ª–∏–Ω–∞ —Å–ª–µ–¥–∞
    particleCount: 35,         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    growColor: '#00ff88',      // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç —Ä–æ—Å—Ç–∞
    crashColor: '#ff3366',     // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫—Ä–∞—Ö–∞
    glowSize: 20,              // –†–∞–∑–º–µ—Ä —Å–≤–µ—á–µ–Ω–∏—è
    lineWidth: 3               // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
  });
}

// –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:
// window.addEventListener('DOMContentLoaded', initCrashGraphAnimation);


// ========================================
// –í–ê–†–ò–ê–ù–¢ 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
// ========================================

// –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleGameState –∏ –¥–æ–±–∞–≤—å—Ç–µ:
function handleGameState(data) {
  switch (data.state) {
    case 'waiting':
      // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏
      if (crashGraphAnimation) {
        crashGraphAnimation.reset();
      }
      // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
      break;
      
    case 'flying':
      // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
      if (crashGraphAnimation) {
        crashGraphAnimation.start();
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ UI
      setInterval(() => {
        if (crashGraphAnimation && crashGraphAnimation.isRunning) {
          const multiplier = crashGraphAnimation.currentMultiplier.toFixed(2) + 'x';
          elements.currentMultiplier.textContent = multiplier;
        }
      }, 50); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50ms
      
      // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
      break;
      
    case 'crashed':
      // –¢—Ä–∏–≥–≥–µ—Ä –∫—Ä–∞—à–∞
      if (crashGraphAnimation) {
        crashGraphAnimation.crash(data.crashPoint);
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
        setTimeout(() => {
          crashGraphAnimation.stop();
        }, 2000);
      }
      // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
      break;
  }
}


// ========================================
// –í–ê–†–ò–ê–ù–¢ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
// ========================================

// –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü crash-websocket.js:

(function integrateGraphAnimation() {
  // –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', integrateGraphAnimation);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
  if (typeof CrashGraphAnimation === 'undefined') {
    console.error('CrashGraphAnimation –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ HTML.');
    return;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ Canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const gameContainer = document.querySelector('.game');
  if (!gameContainer) {
    console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .game –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  let canvas = document.getElementById('crashGraph');
  if (!canvas) {
    canvas = document.createElement('canvas');
    canvas.id = 'crashGraph';
    canvas.width = 400;
    canvas.height = 256;
    Object.assign(canvas.style, {
      position: 'absolute',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      pointerEvents: 'none',
      zIndex: '1'
    });
    gameContainer.insertBefore(canvas, gameContainer.firstChild);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  window.crashGraphAnimation = new CrashGraphAnimation('crashGraph', {
    baseGrowth: 0.0001,
    maxPoints: 120,
    trailLength: 8,
    particleCount: 35,
    growColor: '#00ff88',
    crashColor: '#ff3366',
    glowSize: 20,
    lineWidth: 3
  });
  
  console.log('‚úÖ CrashGraphAnimation —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
})();


// ========================================
// –í–ê–†–ò–ê–ù–¢ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
// ========================================

// –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π:
class CrashGameEventHandler {
  constructor() {
    this.graph = null;
    this.init();
  }
  
  init() {
    this.graph = new CrashGraphAnimation('crashGraph');
    this.setupEventListeners();
  }
  
  setupEventListeners() {
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
    window.addEventListener('crash-game:start', () => {
      this.onGameStart();
    });
    
    window.addEventListener('crash-game:crash', (e) => {
      this.onGameCrash(e.detail.crashPoint);
    });
    
    window.addEventListener('crash-game:reset', () => {
      this.onGameReset();
    });
  }
  
  onGameStart() {
    if (this.graph) {
      this.graph.start();
      console.log('üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
    }
  }
  
  onGameCrash(crashPoint) {
    if (this.graph) {
      this.graph.crash(crashPoint);
      console.log(`üí• –ö—Ä–∞—à –Ω–∞ ${crashPoint.toFixed(2)}x`);
      
      setTimeout(() => {
        this.graph.stop();
      }, 2000);
    }
  }
  
  onGameReset() {
    if (this.graph) {
      this.graph.reset();
      console.log('üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }
  }
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  emitStart() {
    window.dispatchEvent(new CustomEvent('crash-game:start'));
  }
  
  emitCrash(crashPoint) {
    window.dispatchEvent(new CustomEvent('crash-game:crash', {
      detail: { crashPoint }
    }));
  }
  
  emitReset() {
    window.dispatchEvent(new CustomEvent('crash-game:reset'));
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
// const crashHandler = new CrashGameEventHandler();
// crashHandler.emitStart();        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
// crashHandler.emitCrash(3.45);    // –ö—Ä–∞—à –Ω–∞ 3.45x
// crashHandler.emitReset();        // –°–±—Ä–æ—Å


// ========================================
// –í–ê–†–ò–ê–ù–¢ 5: –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
// ========================================

class CrashGameManager {
  constructor(options = {}) {
    this.options = {
      canvasId: 'crashGraph',
      wsUrl: null,
      autoConnect: true,
      ...options
    };
    
    this.graph = null;
    this.ws = null;
    this.gameState = 'waiting';
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    
    this.init();
  }
  
  init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    this.initGraph();
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
    if (this.options.wsUrl && this.options.autoConnect) {
      this.connectWebSocket();
    }
    
    // UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupUI();
  }
  
  initGraph() {
    try {
      this.graph = new CrashGraphAnimation(this.options.canvasId, {
        baseGrowth: 0.0001,
        maxPoints: 120,
        trailLength: 8,
        particleCount: 35,
        growColor: '#00ff88',
        crashColor: '#ff3366',
        glowSize: 20,
        lineWidth: 3
      });
      console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    }
  }
  
  connectWebSocket() {
    try {
      this.ws = new WebSocket(this.options.wsUrl);
      
      this.ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        this.reconnectAttempts = 0;
      };
      
      this.ws.onmessage = (event) => {
        this.handleMessage(event);
      };
      
      this.ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
      };
      
      this.ws.onclose = () => {
        console.log('‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        this.handleDisconnect();
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
    }
  }
  
  handleMessage(event) {
    try {
      const data = JSON.parse(event.data);
      
      switch (data.event) {
        case 'game_starting':
          this.onGameStarting(data);
          break;
        case 'game_started':
          this.onGameStarted(data);
          break;
        case 'game_crashed':
          this.onGameCrashed(data);
          break;
        case 'tick':
          this.onTick(data);
          break;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
  
  onGameStarting(data) {
    this.gameState = 'starting';
    if (this.graph) {
      this.graph.reset();
    }
    console.log('‚è≥ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑', data.countdown, '—Å–µ–∫');
  }
  
  onGameStarted(data) {
    this.gameState = 'flying';
    if (this.graph) {
      this.graph.start();
    }
    console.log('üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
  }
  
  onGameCrashed(data) {
    this.gameState = 'crashed';
    if (this.graph) {
      this.graph.crash(data.crashPoint);
      setTimeout(() => {
        this.graph.stop();
      }, 2000);
    }
    console.log('üí• –ö—Ä–∞—à –Ω–∞', data.crashPoint, 'x');
  }
  
  onTick(data) {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (this.graph && data.currentMultiplier) {
      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const diff = Math.abs(this.graph.currentMultiplier - data.currentMultiplier);
      if (diff > 0.1) {
        console.warn('‚ö†Ô∏è –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è:', diff);
      }
    }
  }
  
  handleDisconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
      console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts})`);
      setTimeout(() => this.connectWebSocket(), delay);
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  }
  
  setupUI() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ UI
    if (this.graph) {
      setInterval(() => {
        if (this.graph.isRunning) {
          const multiplierEl = document.getElementById('currentMultiplier');
          if (multiplierEl) {
            multiplierEl.textContent = this.graph.currentMultiplier.toFixed(2) + 'x';
          }
        }
      }, 50);
    }
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  start() {
    if (this.graph) this.graph.start();
  }
  
  crash(multiplier) {
    if (this.graph) this.graph.crash(multiplier);
  }
  
  reset() {
    if (this.graph) this.graph.reset();
  }
  
  destroy() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    if (this.graph) {
      this.graph.stop();
      this.graph = null;
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
// const gameManager = new CrashGameManager({
//   wsUrl: 'wss://your-server.com/crash',
//   autoConnect: true
// });


// ========================================
// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
// ========================================

if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    initCrashGraphAnimation,
    CrashGameEventHandler,
    CrashGameManager
  };
}

if (typeof window !== 'undefined') {
  window.CrashGameIntegration = {
    initCrashGraphAnimation,
    CrashGameEventHandler,
    CrashGameManager
  };
}
